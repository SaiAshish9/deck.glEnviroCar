{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MALE_COLOR","FEMALE_COLOR","App","state","data","fetch","then","json","d","features","map","x","forEach","i","Math","floor","random","push","console","log","setState","layers","ScatterplotLayer","id","this","radiusScale","radiusMinPixels","getPosition","getColor","className","style","color","fontWeight","position","top","left","zIndex","href","bottom","right","textAlign","width","minHeight","display","justifyContent","alignItems","initialViewState","longitude","latitude","zoom","maxZoom","controller","mapboxApiAccessToken","mapStyle","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kUAYQA,EAAa,CAAC,EAAG,IAAK,KACtBC,EAAe,CAAC,IAAK,EAAG,KAgGfC,E,2MA1FjBC,MAAM,CACJC,KAAK,I,mFAKa,IAAD,OACjBC,MAAM,iDACLC,MAAK,SAAAF,GAAI,OAAEA,EAAKG,UAChBD,MAAK,SAAAE,IACRA,EAAEA,EAAEC,SAASC,KAAI,SAAAC,GAAC,OAAEA,EAAC,SAAD,gBAElBC,SAAQ,SAAAD,GACV,IAAIE,EAAEC,KAAKC,MAAqB,EAAfD,KAAKE,UACtBL,EAAEM,KAAKJ,MAGPK,QAAQC,IAAIX,GACZ,EAAKY,SAAS,CAAChB,KAAKI,S,+BAOlB,IAAMa,EAAS,CAEb,IAAIC,IAAiB,CACnBC,GAAI,eACJnB,KAAKoB,KAAKrB,MAAMC,KAChBqB,YAAa,GACbC,gBAAiB,EACjBC,YAAa,SAAAnB,GAAC,MAAI,CAACA,EAAE,GAAIA,EAAE,GAAI,IAC/BoB,SAAU,SAAApB,GAAC,OAAc,IAATA,EAAE,GAAWR,EAAaC,MAI1C,OACN,6BAEA,uBAAG4B,UAAU,wBAAwBC,MAAO,CAACC,MAAM,QAAQC,WAAW,OAAOC,SAAS,WAAWC,IAAI,OAAOC,KAAK,MAAMC,OAAO,GAC9HC,KAAK,kDADL,eAMA,uBAAGR,UAAU,wBAAwBC,MAAO,CAACC,MAAM,QAAQC,WAAW,OAAOC,SAAS,WAAWK,OAAO,OAAOC,MAAM,MAAMH,OAAO,GAAIC,KAAK,iDAA3I,kBAIA,uBAAGR,UAAU,gBAAgBC,MAAO,CAACC,MAAM,QAAQC,WAAW,OAAOC,SAAS,WAAWK,OAAO,OAAOH,KAAK,MAAMC,OAAO,IAAzH,sBAIA,yBAAKP,UAAU,UAAUC,MAAO,CAACC,MAAM,QAAQS,UAAU,SAASR,WAAW,OAAOC,SAAS,WAAWG,OAAO,EAAEF,IAAI,EAAEO,MAAM,OAAOC,UAAU,MAAMC,QAAQ,OAAOC,eAAe,SAASC,WAAW,WACtM,qGAKQ,kBAAC,IAAD,CACAC,iBAAmB,CACjBC,UAAW,OACXC,SAAU,MACVC,KAAM,GACNC,QAAS,IAETC,YAAY,EACZ9B,OAAQA,GAER,kBAAC,IAAD,CAAW+B,qBA/ES,+FA+EkCC,SAAU,qCAG1E,yBAAKxB,UAAU,UAAUC,MAAO,CAACC,MAAM,QAAQS,UAAU,SAASR,WAAW,OAAOC,SAAS,WAAWG,OAAO,EAAEE,OAAO,EAAEG,MAAM,OAAOC,UAAU,MAAMC,QAAQ,OAAOC,eAAe,SAASC,WAAW,WACzM,0E,GA5EoBS,IAAMC,WCLNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,a","file":"static/js/main.57dfa5f8.chunk.js","sourcesContent":[" \n  import React from \"react\";\n    \n  import DeckGL from \"@deck.gl/react\";\n  import { ScatterplotLayer } from \"@deck.gl/layers\";\n  import { StaticMap } from \"react-map-gl\";\n  \n  \n\n  \n  const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1Ijoic2FpYXNoaXNoIiwiYSI6ImNrMWdyNTc4cjA3dzEzb2sxaTlrdzFiOHoifQ.B1JQ-8A43BNcL-0kMxO9Bg';\n  \n  const MALE_COLOR = [0, 128, 255];\n  const FEMALE_COLOR = [255, 0, 128];\n  \n\n\n  class App extends React.Component  {\n\nstate={\n  data:[]\n}\n\n\n\ncomponentDidMount(){\n  fetch('https://envirocar.org/api/stable/measurements')\n  .then(data=>data.json())\n  .then(d=>{\nd=d.features.map(x=>x['geometry']['coordinates'])\n\nd.forEach(x=>{\nvar i=Math.floor(Math.random() *3)  \nx.push(i)}\n)\n\nconsole.log(d)\nthis.setState({data:d})\n  })\n\n}\n\nrender(){\n  \n  const layers = [\n\n    new ScatterplotLayer({\n      id: 'scatter-plot',\n      data:this.state.data,\n      radiusScale: 12,\n      radiusMinPixels: 3,\n      getPosition: d => [d[0], d[1], 0],\n      getColor: d => (d[2] === 1 ? MALE_COLOR : FEMALE_COLOR)\n    })\n]\n\n      return (\n<div>\n\n<a className='btn btn-dark bg-white' style={{color:'black',fontWeight:'bold',position:'absolute',top:'15vh',left:'10%',zIndex:1}} \nhref=\"https://github.com/SaiAshish9/deck.glEnviroCar\" >\nSource Code\n</a>\n\n\n<a className='btn btn-dark bg-white' style={{color:'black',fontWeight:'bold',position:'absolute',bottom:'15vh',right:'10%',zIndex:1}} href=\"https://envirocar.org/api/stable/measurements\" >\nShow JSON Data\n</a>\n\n<a className='btn btn-dark ' style={{color:'white',fontWeight:'bold',position:'absolute',bottom:'15vh',left:'10%',zIndex:1}} >\nCheck Console Data\n</a>\n\n<div className=\"bg-dark\" style={{color:'white',textAlign:'center',fontWeight:'bold',position:'absolute',zIndex:1,top:0,width:'100%',minHeight:'8vh',display:'flex',justifyContent:'center',alignItems:'center'}}>\n<h3>\ndeck.gl React Based Visualization Of Envirocar Measurements Api Data\n</h3>\n</div>\n\n        <DeckGL\n        initialViewState= {{\n          longitude: 6.4847,\n          latitude: 51.26,\n          zoom: 12,\n          maxZoom: 16\n        }}\n          controller={true}\n          layers={layers}\n        >\n          <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} mapStyle={'mapbox://styles/mapbox/light-v9'} />\n        </DeckGL>\n\n<div className=\"bg-dark\" style={{color:'white',textAlign:'center',fontWeight:'bold',position:'absolute',zIndex:1,bottom:0,width:'100%',minHeight:'6vh',display:'flex',justifyContent:'center',alignItems:'center'}}>\n<h3>\n\nMade with ðŸ’– by Sai Ashish\n\n</h3>\n</div>\n\n        </div>\n\n      );\n    }\n    }\n  \n  \n  \n  \n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}